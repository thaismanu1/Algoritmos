#include <iostream>
#include <iostream>
#include <cmath>

using namespace std;

struct dado
{
    int k;
    int status; // 0-vazio, 1-ocupado, 2-removido
};

int hash_aux(int k, int m)
{
	int h;

	//k mod m
	h = k % m;

	if (h < 0)
	{
		h = k + m;
	}

	return h;
}

int hash1(int k, int i, int m)
{
	// h(k,i,m)=(h'(k,m)+i)modm

	int H;

	//sondagem linear
	H = (hash_aux(k, m) + i) % m;

	return H;
}

int hash_insert(dado t[], int m, int k) //funcao para insercao
{
	int i = 0;
	int j;

	do
	{
		j = hash1(k, i, m);
		if (t[j].status != 1)
		{
			t[j].k = k;
			t[j].status = 1;
			return j;
		}
		else i = i + 1;
	}
	while (i != m);
	return -1;
}

//pesquisa o elento desejado
int hash_search(dado t[], int m, int k)
{
	int i = 0;
	int j;

	do
	{
		j = hash1(k, i, m);
		if (t[j].k == k)
			return j;
		i++;
	}while (t[j].status != 0 && i < m);
	
	return -1;
}

// funcao para remocao de chave
int hash_remove(dado t[], int m, int k)
{
	int j;
	
    j = hash_search(t,m,k);
    if(j != -1)
	{
       t[j].status = 2;
       t[j].k = -1;
       return 0; // consegui remover
	}else
       return -1; // k nao esta na tabela

}
int main()
{
	int m; //tamanho da tabela
	int k; //chave a ser inserida na tabela
	int i = 0;
	int p; // elemento para remoção 
	
	dado t[30];

	cin >> m;

	//iguala todos os status a -1
	for(i = 0; i < m; i++)
	{
		t[i].k = -1;
		t[i].status = 0;
	}

	cin >> k;

	//inserindo elementos na tabela
	while(k != 0)
	{
		hash_insert(t, m, k);
		cin >> k;
	}
	
	cin >> p;
	
	//removendo o elemento desejado
	hash_remove(t, m, p);
	
	
	for(i = 0; i < m; i++)
	{
		cout << t[i].k << " ";
	}

	return 0;

}
